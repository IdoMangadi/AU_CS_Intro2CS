package Exe.Ex4.gui;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.Comparator;

import Exe.Ex4.Ex4_Const;
import Exe.Ex4.GUIShape;
import Exe.Ex4.GUI_Shapeable;
import Exe.Ex4.ShapeCollection;
import Exe.Ex4.ShapeCollectionable;
import Exe.Ex4.geo.Circle2D;
import Exe.Ex4.geo.GeoShapeable;
import Exe.Ex4.geo.Point2D;
import Exe.Ex4.geo.Polygon2D;
import Exe.Ex4.geo.Rect2D;
import Exe.Ex4.geo.Segment2D;
import Exe.Ex4.geo.ShapeComp;
import Exe.Ex4.geo.Triangle2D;

/**
 * 
 * This class is a simple "inter-layer" connecting (aka simplifying) the
 * StdDraw with the Map class.
 * Written for 101 java course it uses simple static functions to allow a 
 * "Singleton-like" implementation.
 * @author boaz.benmoshe
 *
 */
public class Ex4 implements Ex4_GUI{
	private  ShapeCollectionable _shapes = new ShapeCollection();
	private  GUI_Shapeable _gs;
	private  Color _color = Color.blue;
	private  boolean _fill = false;
	private  String _mode = "";
	private  Point2D _p1;
	private  Point2D _p2 = null;
	private  Polygon2D _spoly = new Polygon2D();
	//private  boolean _rightClicked = false;
	private Comparator<GUI_Shapeable> _comp;
	private  Point2D _pco;
	
	private  static Ex4 _winEx4 = null;
	
	private Ex4() {
			init(null);
	}
	public void init(ShapeCollectionable s) {
		if(s==null) {_shapes = new ShapeCollection();}
		else {_shapes = s.copy();}
		GUI_Shapeable _gs = null;
		Polygon2D _pp = null;
		_color = Color.blue;
		_fill = false;
		_mode = "";
		Point2D _p1 = null;
	}
	public void show(double d) {
		StdDraw_Ex4.setScale(0,d);
		StdDraw_Ex4.show();
		drawShapes();
	}
	public static Ex4 getInstance() {
		if(_winEx4 ==null) {
			_winEx4 = new Ex4();
		}
		return _winEx4;
	}
	
	public void drawShapes() {
		StdDraw_Ex4.clear();
			for(int i=0;i<_shapes.size();i++) {
				GUI_Shapeable sh = _shapes.get(i);
				
				drawShape(sh);
			}
			if(_gs!=null) {drawShape(_gs);}
		StdDraw_Ex4.show();
	}
	
	private static void drawShape(GUI_Shapeable g) {
		StdDraw_Ex4.setPenColor(g.getColor());
		if(g.isSelected()) {StdDraw_Ex4.setPenColor(Color.gray);}
		GeoShapeable gs = g.getShape();
		boolean isFill = g.isFilled();
		
		//Circle:
		if(gs instanceof Circle2D) {
			Circle2D c = (Circle2D)gs;
			Point2D cen = c.getPoints()[0];
			double rad = c.getRadius();
			if(isFill) {
				StdDraw_Ex4.filledCircle(cen.x(), cen.y(), rad);
			}
			else { 
				StdDraw_Ex4.circle(cen.x(), cen.y(), rad);
			}
		}
		
		//Rectangle:
		if(gs instanceof Rect2D) {
			Rect2D r = (Rect2D)gs;
			Point2D[] r4Points = r.get4Points();
			double[] xxxx = {r4Points[0].x(), r4Points[1].x(), r4Points[2].x(), r4Points[3].x()};
			double[] yyyy = {r4Points[0].y(), r4Points[1].y(), r4Points[2].y(), r4Points[3].y()};
			if(isFill) {
				StdDraw_Ex4.filledPolygon(xxxx, yyyy);
			}
			else { 
				StdDraw_Ex4.polygon(xxxx, yyyy);
			}
		}
		
		//Triangle:
		if(gs instanceof Triangle2D) {
			Triangle2D t = (Triangle2D)gs;
			Point2D[] tPoints = t.getPoints();
			//Putting all the x's in three length array:
			double[] xxx = {tPoints[0].x(), tPoints[1].x(), tPoints[2].x()};
			//Putting all the y's in three length array:
			double[] yyy = {tPoints[0].y(), tPoints[1].y(), tPoints[2].y()};
			if(isFill) {
				StdDraw_Ex4.filledPolygon(xxx, yyy);
			}
			else { 
				StdDraw_Ex4.polygon(xxx, yyy);
			}
		}
		
		//Segment:
		if(gs instanceof Segment2D) {
			Segment2D s = (Segment2D)gs;
			Point2D[] sPoints = s.getPoints();
			//Putting all the x's in two length array:
			double[] xx = {sPoints[0].x(), sPoints[1].x()};
			//Putting all the y's in two length array:
			double[] yy = {sPoints[0].y(), sPoints[1].y()};
			StdDraw_Ex4.polygon(xx, yy);
		}
		
		//Polygon:
		if(gs instanceof Polygon2D) {
			Polygon2D poly = (Polygon2D)gs;
			Point2D[] polyPoints = poly.getPoints();
			double[] xs = new double [polyPoints.length];
			double[] ys = new double [polyPoints.length];
			for(int i=0; i<polyPoints.length; i++) {
				xs[i] = polyPoints[i].x();
				ys[i] = polyPoints[i].y();
			}
			if(isFill) {
				StdDraw_Ex4.filledPolygon(xs, ys);
			}
			else { 
				StdDraw_Ex4.polygon(xs, ys);
			}
		}
	}
	private void setColor(Color c) {
		for(int i=0;i<_shapes.size();i++) {
			GUI_Shapeable s = _shapes.get(i);
			if(s.isSelected()) {
				s.setColor(c);
			}
		}
	}
	private void setFill() {
		for(int i=0;i<_shapes.size();i++) {
			GUI_Shapeable s = _shapes.get(i);
			if(s.isSelected()) {
				s.setFilled(_fill);
			}
		}
	}

	public void actionPerformed(String p) {
		_mode = p;
		if(p.equals("Blue")) {_color = Color.BLUE; setColor(_color);}
		if(p.equals("Red")) {_color = Color.RED; setColor(_color);}
		if(p.equals("Green")) {_color = Color.GREEN; setColor(_color);}
		if(p.equals("White")) {_color = Color.WHITE; setColor(_color);}
		if(p.equals("Black")) {_color = Color.BLACK; setColor(_color);}
		if(p.equals("Yellow")) {_color = Color.YELLOW; setColor(_color);}
		if(p.equals("Fill")) {_fill = true; setFill();}
		if(p.equals("Empty")) {_fill = false; setFill();}
		
		//Clear:
		if(p.equals("Clear")) {
			_shapes.removeAll();
			_gs = null;
			_p1 = null;
			_spoly = new Polygon2D();
			_p2 = null;
		}
		
		//Remove:
		if(p.equals("Remove")) {
			for(int i=0; i<_shapes.size(); i++) {
				GUI_Shapeable s = _shapes.get(i);
				if(s.isSelected()) {
					_shapes.removeElementAt(i);
					i--;
				}
				_p1 = null;
			}
		}
		
		//Sort:
		if(_mode.equals("ByArea")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_Area);
			_shapes.sort(_comp);
		}
		if(_mode.equals("ByAntiArea")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_Anti_Area);
			_shapes.sort(_comp);
		}
		if(_mode.equals("ByPerimeter")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_Perimeter);
			_shapes.sort(_comp);
		}
		if(_mode.equals("ByAntiPerimeter")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_Anti_Perimeter);
			_shapes.sort(_comp);
		}
		if(_mode.equals("ByToString")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_toString);
			_shapes.sort(_comp);
		}
		if(_mode.equals("ByAntiToString")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_Anti_toString);
			_shapes.sort(_comp);
		}
		if(_mode.equals("ByTag")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_Tag);
			_shapes.sort(_comp);
		}
		if(_mode.equals("ByAntiTag")) {
			_comp = new ShapeComp(Ex4_Const.Sort_By_Anti_Tag);
			_shapes.sort(_comp);
		}
		
		//Selections:
		if(_mode.equals("All")) {
			for(int i=0;i<_shapes.size();i++) {
				GUI_Shapeable s = _shapes.get(i);
				GeoShapeable g = s.getShape();
				if(g!=null) {
					s.setSelected(true);
				}
			}
		}
		if(_mode.equals("Anti")) {
			for(int i=0;i<_shapes.size();i++) {
				GUI_Shapeable s = _shapes.get(i);
				GeoShapeable g = s.getShape();
				if(g!=null) {
					s.setSelected(!s.isSelected());
				}
			}
		}
		if(_mode.equals("None")) {
			for(int i=0;i<_shapes.size();i++) {
				GUI_Shapeable s = _shapes.get(i);
				GeoShapeable g = s.getShape();
				if(g!=null) {
					s.setSelected(false);
				}
			}
		}
		
		//Info:
		if(_mode.equals("Info")) {
				System.out.println(getInfo());
		}
		
		//Save:
		if(_mode.equals("Save")) {
			FileDialog chooser = new FileDialog(new Frame(), "Use txt extension", FileDialog.SAVE);
			chooser.setVisible(true);
			String fileName = chooser.getFile();
			if(fileName != null) {
				_shapes.save(chooser.getDirectory() + File.separator + chooser.getFile());
			}
		}
		//Load:
		if(_mode.equals("Load")) {
			FileDialog chooser = new FileDialog(new Frame(), "Use txt extension", FileDialog.LOAD);
			chooser.setVisible(true);
			String fileName = chooser.getFile();
			if(fileName != null) {
				_shapes.load(chooser.getDirectory() + File.separator + chooser.getFile());
			}
		}
		
		drawShapes();
	}
	
	public void mouseClicked(Point2D p) {
		System.out.println("Mode: "+_mode+"  "+p);
		
		// Circle:
		if(_mode.equals("Circle")) {
			if(_gs==null) {
				_p1 = new Point2D(p);
			}
			else {
				_gs.setColor(_color);
				_gs.setFilled(_fill);
				_gs.setTag(_shapes.size()+1);
				_shapes.add(_gs);
				_gs = null;
				_p1 = null;
			}
		}
		
		//Rectangle:
		if(_mode.equals("Rect")) {
			if(_gs==null) {
				_p1 = new Point2D(p);
			}
			else {
				_gs.setColor(_color);
				_gs.setFilled(_fill);
				_gs.setTag(_shapes.size()+1);
				_shapes.add(_gs);
				_gs = null;
				_p1 = null;
			}
		}
		
		//Triangle:
		if(_mode.equals("Triangle")) {
			if(_gs == null) {
				_p1 = new Point2D(p);
			}
			else {
				if(_p2 == null) {
					_p2 = p;
				}
				else {
					_gs.setColor(_color);
					_gs.setFilled(_fill);
					_gs.setTag(_shapes.size()+1);
					_shapes.add(_gs);
					_gs = null;
					_p1 = null;
					_p2 = null;
				}
			}
		}
		
		//Segment:
		if (_mode.equals("Segment")) {
			if(_gs==null) {
				_p1 = new Point2D(p);
			}
			else {
				_gs.setColor(_color);
				_gs.setFilled(_fill);
				_gs.setTag(_shapes.size()+1);
				_shapes.add(_gs);
				_gs = null;
				_p1 = null;
			}
		}
		
		//Polygon:
		if(_mode.equals("Polygon")) {
			
			_spoly.add(p);
			if(_gs == null) {
				_p1 = new Point2D(p); // here we go to mouse moved!
			}
		}
		
		//Move: 
		if(_mode.equals("Move")) {
			if(_p1==null) {_p1 = new Point2D(p);}
			else {
				_p1 = new Point2D(p.x()-_p1.x(), p.y()-_p1.y());
				move();
				_p1 = null;
			}
		}
		
		//Scale 90%:
		if (_mode.equals("Scale_90%")) {
			for (int i=0; i<_shapes.size(); i++) {
				GUI_Shapeable s = _shapes.get(i);
				GeoShapeable g = s.getShape();
				if(s.isSelected() && g!=null) {
					g.scale(p, 0.9);
				}
			}
			_p1 = null;
		}
		//Scale 110%:
		if (_mode.equals("Scale_110%")) {
			for (int i=0; i<_shapes.size(); i++) {
				GUI_Shapeable s = _shapes.get(i);
				GeoShapeable g = s.getShape();
				if(s.isSelected() && g!=null) {
					g.scale(p, 1.1);
				}
			}
			_p1 = null;
		}
		
		//Rotate:
		if (_mode.equals("Rotate")) {
			if (_p1==null) {
				_p1 = p;
			}
			else {
				//Calculating the angle in degrees that needs to be rotate in:
				double deg = Math.toDegrees(Math.atan2(p.y() - _p1.y(), p.x() - _p1.x()));
				if(deg < 0){
			        deg = deg +360;
			    }
				//System.out.println("myn "+deg);
				for (int i=0; i<_shapes.size(); i++) {
					GUI_Shapeable s = _shapes.get(i);
					GeoShapeable g = s.getShape();
					if(s.isSelected() && g!=null) {
						g.rotate(_p1, deg);
					}
				}
				_p1 = null;
			}
		}
		
		//Copy:
		if(_mode.equals("Copy")){
			if(_pco != null) {
				Point2D vec = _pco.vector(p);
				for(int i=0; i<_shapes.size(); i++) {
					GUI_Shapeable s = _shapes.get(i);
					GeoShapeable g = s.getShape();
					GUI_Shapeable sc;
					if(s.isSelected() && g!=null) {
						sc = s.copy();
						sc.getShape().move(vec);
						_shapes.add(sc);
					}
				}
				_pco = null;
			}
			else {
				_pco = new Point2D(p);
			}
		}
		
		//selection by point:
		if(_mode.equals("Point")) {
			select(p);
		}
		
		drawShapes();
	}
	
	private void select(Point2D p) {
		for(int i=0;i<_shapes.size();i++) {
			GUI_Shapeable s = _shapes.get(i);
			GeoShapeable g = s.getShape();
			if(g!=null && g.contains(p)) {
				s.setSelected(!s.isSelected());
			}
		}
	}
	private void move() {
		for(int i=0;i<_shapes.size();i++) {
			GUI_Shapeable s = _shapes.get(i);
			GeoShapeable g = s.getShape();
			if(s.isSelected() && g!=null) {
				g.move(_p1);
			}
		}
	}
	
	public void mouseRightClicked(Point2D p) {
		System.out.println("right click!");
		_gs = new GUIShape(_spoly,_fill, _color, _shapes.size()+1);
		_shapes.add(_gs);
		_spoly = new Polygon2D();
		_p1= null;
		_gs = null;
		drawShapes();
	}
	public void mouseMoved(MouseEvent e) {
		if(_p1!=null) {
			double x1 = StdDraw_Ex4.mouseX();
			double y1 = StdDraw_Ex4.mouseY();
			GeoShapeable gs = null;
			Polygon2D gsp = new Polygon2D();
			Point2D[] spoly_p = _spoly.getPoints();
			for(int i=0; i<spoly_p.length; i++) {
				gsp.add(spoly_p[i]);
			}
			
			//System.out.println("M: "+x1+","+y1);
			Point2D p = new Point2D(x1,y1);
			
			//Circle:
			if(_mode.equals("Circle")) {
				double r = _p1.distance(p);
				gs = new Circle2D(_p1,r);
			}
			
			//Rectangle:
			if(_mode.equals("Rect")) {
				gs = new Rect2D(_p1,p);
			}
			
			//Triangle:
			if(_mode.equals("Triangle")) {
				if(_p2 == null) {
					gs = new Segment2D(_p1 ,p);
				}
				else {
					gs = new Triangle2D(_p1, _p2, p);
				}
			}
			
			//Segment:
			if(_mode.equals("Segment")) {
				gs = new Segment2D(_p1,p);
			}
			
			//Polygon:
			if(_mode.equals("Polygon")) {
				gsp.add(p);	
				_gs = new GUIShape(gsp,false, Color.pink, 0);
			}
			
			else {
				_gs = new GUIShape(gs,false, Color.pink, 0);
			}
			
			drawShapes();
		}
	}
	@Override
	public ShapeCollectionable getShape_Collection() {
		return this._shapes;
	}
	
	@Override
	public void show() {show(Ex4_Const.DIM_SIZE); }
	
	@Override
	public String getInfo() {
		String ans = _shapes.toString();
		return ans;
	}
}
